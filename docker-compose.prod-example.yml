# Production environment example
# Copy this file to docker-compose.prod.yml and customize for your environment
# Use environment variables or Docker secrets for sensitive data

x-worker-common: &worker-template
  image: ghcr.io/odense-rpa/ats-worker:v0.2.0
  environment:
    - ATS_URL=${ATS_URL:-http://api:8000}
    - ATS_TOKEN=${ATS_TOKEN}
    - TZ=${TZ:-UTC}
    - ATS_CAPABILITIES=${ATS_CAPABILITIES:-}
  networks:
    - app-network
  depends_on:
    api:
      condition: service_healthy
  restart: unless-stopped

services:
  # Infrastructure services
  db:
    image: postgres:17-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    networks:
      - app-network
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Application services
  api:
    image: ghcr.io/odense-rpa/ats-backend:v0.2.0
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000"
    environment:
      - TZ=${TZ:-UTC}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    image: ghcr.io/odense-rpa/ats-frontend:v0.2.0
    ports:
      - "80"
    environment:
      - TZ=${TZ:-UTC}
    networks:
      - app-network
    restart: unless-stopped

  proxy:
    image: nginx:1.25-alpine
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ${SSL_CERT_PATH:-./ssl}:/etc/ssl/certs:ro
    depends_on:
      - api
      - frontend
    networks:
      - app-network
    restart: unless-stopped

  # Worker services - scale as needed
  worker01:
    <<: *worker-template
    hostname: worker-01

  worker02:
    <<: *worker-template
    hostname: worker-02

  # Add more workers as needed:
  # worker03:
  #   <<: *worker-template
  #   hostname: worker-03

networks:
  app-network:
    driver: bridge

volumes:
  db-data: